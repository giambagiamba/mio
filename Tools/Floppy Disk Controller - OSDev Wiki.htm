<!DOCTYPE html>
<html dir="ltr" class="client-js" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>Floppy Disk Controller - OSDev Wiki</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.18.0">
<link rel="shortcut icon" href="/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="OSDev Wiki (en)">
<link rel="EditURI" type="application/rsd+xml" href="https://wiki.osdev.org/api.php?action=rsd">
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom">
<link rel="stylesheet" href="/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*">
<style type="text/css" media="all">.mw-collapsible-toggle{float:right} li .mw-collapsible-toggle{float:none} .mw-collapsible-toggle-li{list-style:none}

/* cache key: wikidb:resourceloader:filter:minify-css:4:4250852ed2349a0d4d0fc6509a3e7d4c */
</style><style type="text/css" media="all">.js-messagebox{margin:1em 5%;padding:0.5em 2.5%;border:1px solid #ccc;background-color:#fcfcfc;font-size:0.8em}.js-messagebox .js-messagebox-group{margin:1px;padding:0.5em 2.5%;border-bottom:1px solid #ddd}.js-messagebox .js-messagebox-group:last-child{border-bottom:thin none transparent}

/* cache key: wikidb:resourceloader:filter:minify-css:4:8b08bdc91c52a9ffba396dccfb5b473c */
</style><meta name="ResourceLoaderDynamicStyles" content="">
<link rel="stylesheet" href="/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*">
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script><script src="/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=20120104T052914Z"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Floppy_Disk_Controller", "wgTitle": "Floppy Disk Controller", "wgCurRevisionId": 22505, "wgArticleId": 1458, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Storage", "Common Devices"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script><script type="text/javascript" src="/load.php?debug=false&amp;lang=en&amp;modules=jquery.client%7Cmediawiki.page.startup&amp;skin=vector&amp;version=20120612T011114Z&amp;*"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--><base href="https://wiki.osdev.org/Floppy_Disk_Controller"></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Floppy_Disk_Controller action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div class="js-messagebox" id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Floppy Disk Controller</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="#mw-head">navigation</a>,
					<a href="#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div dir="ltr" class="mw-content-ltr" lang="en"><table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2><span class="toctoggle"> [<a href="#" class="internal" id="togglelink">hide</a>] </span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Overview_and_Documentation"><span class="tocnumber">1</span> <span class="toctext">Overview and Documentation</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Accessing_Floppies_in_Real_Mode"><span class="tocnumber">1.1</span> <span class="toctext">Accessing Floppies in Real Mode</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Accessing_USB_Floppy_Drives"><span class="tocnumber">1.2</span> <span class="toctext">Accessing USB Floppy Drives</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#The_Floppy_Subsystem_is_Ugly"><span class="tocnumber">1.3</span> <span class="toctext">The Floppy Subsystem is Ugly</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#How_Many_Controllers.3F_One.21"><span class="tocnumber">1.4</span> <span class="toctext">How Many Controllers? One!</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#How_Many_Drives.3F"><span class="tocnumber">1.5</span> <span class="toctext">How Many Drives?</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#The_Actual_Drive"><span class="tocnumber">1.6</span> <span class="toctext">The Actual Drive</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#CHS"><span class="tocnumber">1.7</span> <span class="toctext">CHS</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#DMA_Data_Transfers"><span class="tocnumber">1.8</span> <span class="toctext">DMA Data Transfers</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#PIO_Data_Transfers"><span class="tocnumber">1.9</span> <span class="toctext">PIO Data Transfers</span></a>
<ul>
<li class="toclevel-3 tocsection-11"><a href="#Bochs_Can.27t_Handle_Polling_PIO"><span class="tocnumber">1.9.1</span> <span class="toctext">Bochs Can't Handle Polling PIO</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-12"><a href="#There_are_3_.22Modes.22"><span class="tocnumber">1.10</span> <span class="toctext">There are 3 "Modes"</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="#Most_Commands_Run_.22Silently.22"><span class="tocnumber">1.11</span> <span class="toctext">Most Commands Run "Silently"</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="#Timing_Issues"><span class="tocnumber">1.12</span> <span class="toctext">Timing Issues</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#Reliability"><span class="tocnumber">1.13</span> <span class="toctext">Reliability</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="#Registers"><span class="tocnumber">2</span> <span class="toctext">Registers</span></a>
<ul>
<li class="toclevel-2 tocsection-17"><a href="#FIFO_and_Tape_Drive_Registers"><span class="tocnumber">2.1</span> <span class="toctext">FIFO and Tape Drive Registers</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="#DOR_bitflag_definitions"><span class="tocnumber">2.2</span> <span class="toctext">DOR bitflag definitions</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#MSR_bitflag_definitions"><span class="tocnumber">2.3</span> <span class="toctext">MSR bitflag definitions</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="#CCR_and_DSR"><span class="tocnumber">2.4</span> <span class="toctext">CCR and DSR</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="#DIR_register.2C_Disk_Change_bit"><span class="tocnumber">2.5</span> <span class="toctext">DIR register, Disk Change bit</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-22"><a href="#Programming_Details"><span class="tocnumber">3</span> <span class="toctext">Programming Details</span></a>
<ul>
<li class="toclevel-2 tocsection-23"><a href="#Motor_Delays"><span class="tocnumber">3.1</span> <span class="toctext">Motor Delays</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="#Gap_Lengths"><span class="tocnumber">3.2</span> <span class="toctext">Gap Lengths</span></a></li>
<li class="toclevel-2 tocsection-25"><a href="#Hardware_Control_of_Bad_Cylinders"><span class="tocnumber">3.3</span> <span class="toctext">Hardware Control of Bad Cylinders</span></a></li>
<li class="toclevel-2 tocsection-26"><a href="#Procedures"><span class="tocnumber">3.4</span> <span class="toctext">Procedures</span></a>
<ul>
<li class="toclevel-3 tocsection-27"><a href="#Reinitialization"><span class="tocnumber">3.4.1</span> <span class="toctext">Reinitialization</span></a></li>
<li class="toclevel-3 tocsection-28"><a href="#Controller_Reset"><span class="tocnumber">3.4.2</span> <span class="toctext">Controller Reset</span></a></li>
<li class="toclevel-3 tocsection-29"><a href="#Drive_Selection"><span class="tocnumber">3.4.3</span> <span class="toctext">Drive Selection</span></a></li>
<li class="toclevel-3 tocsection-30"><a href="#Detecting_Media"><span class="tocnumber">3.4.4</span> <span class="toctext">Detecting Media</span></a></li>
<li class="toclevel-3 tocsection-31"><a href="#Waiting"><span class="tocnumber">3.4.5</span> <span class="toctext">Waiting</span></a></li>
<li class="toclevel-3 tocsection-32"><a href="#The_Proper_Way_to_issue_a_command"><span class="tocnumber">3.4.6</span> <span class="toctext">The Proper Way to issue a command</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-33"><a href="#Commands"><span class="tocnumber">3.5</span> <span class="toctext">Commands</span></a>
<ul>
<li class="toclevel-3 tocsection-34"><a href="#Option_bits"><span class="tocnumber">3.5.1</span> <span class="toctext">Option bits</span></a>
<ul>
<li class="toclevel-4 tocsection-35"><a href="#Bit_MT"><span class="tocnumber">3.5.1.1</span> <span class="toctext">Bit MT</span></a></li>
<li class="toclevel-4 tocsection-36"><a href="#Bit_MF"><span class="tocnumber">3.5.1.2</span> <span class="toctext">Bit MF</span></a></li>
<li class="toclevel-4 tocsection-37"><a href="#Bit_SK"><span class="tocnumber">3.5.1.3</span> <span class="toctext">Bit SK</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-38"><a href="#Status_Registers"><span class="tocnumber">3.5.2</span> <span class="toctext">Status Registers</span></a>
<ul>
<li class="toclevel-4 tocsection-39"><a href="#st0"><span class="tocnumber">3.5.2.1</span> <span class="toctext">st0</span></a></li>
<li class="toclevel-4 tocsection-40"><a href="#st1"><span class="tocnumber">3.5.2.2</span> <span class="toctext">st1</span></a></li>
<li class="toclevel-4 tocsection-41"><a href="#st2"><span class="tocnumber">3.5.2.3</span> <span class="toctext">st2</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-42"><a href="#Configure"><span class="tocnumber">3.5.3</span> <span class="toctext">Configure</span></a></li>
<li class="toclevel-3 tocsection-43"><a href="#Version"><span class="tocnumber">3.5.4</span> <span class="toctext">Version</span></a></li>
<li class="toclevel-3 tocsection-44"><a href="#Lock"><span class="tocnumber">3.5.5</span> <span class="toctext">Lock</span></a></li>
<li class="toclevel-3 tocsection-45"><a href="#Specify"><span class="tocnumber">3.5.6</span> <span class="toctext">Specify</span></a>
<ul>
<li class="toclevel-4 tocsection-46"><a href="#SRT.2C_HLT_and_HUT"><span class="tocnumber">3.5.6.1</span> <span class="toctext">SRT, HLT and HUT</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-47"><a href="#Sense_Interrupt"><span class="tocnumber">3.5.7</span> <span class="toctext">Sense Interrupt</span></a></li>
<li class="toclevel-3 tocsection-48"><a href="#Recalibrate"><span class="tocnumber">3.5.8</span> <span class="toctext">Recalibrate</span></a></li>
<li class="toclevel-3 tocsection-49"><a href="#Seek"><span class="tocnumber">3.5.9</span> <span class="toctext">Seek</span></a>
<ul>
<li class="toclevel-4 tocsection-50"><a href="#Relative_seek"><span class="tocnumber">3.5.9.1</span> <span class="toctext">Relative seek</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-51"><a href="#Read.2FWrite"><span class="tocnumber">3.5.10</span> <span class="toctext">Read/Write</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-52"><a href="#Perpendicular_Mode_and_2.88M_floppies"><span class="tocnumber">3.6</span> <span class="toctext">Perpendicular Mode and 2.88M floppies</span></a></li>
<li class="toclevel-2 tocsection-53"><a href="#Additional_Programming_Notes"><span class="tocnumber">3.7</span> <span class="toctext">Additional Programming Notes</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-54"><a href="#Code_Examples"><span class="tocnumber">4</span> <span class="toctext">Code Examples</span></a>
<ul>
<li class="toclevel-2 tocsection-55"><a href="#A_common_coding_error_example"><span class="tocnumber">4.1</span> <span class="toctext">A common coding error example</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-56"><a href="#Related_Links"><span class="tocnumber">5</span> <span class="toctext">Related Links</span></a>
<ul>
<li class="toclevel-2 tocsection-57"><a href="#Articles"><span class="tocnumber">5.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-58"><a href="#Reference_Documents"><span class="tocnumber">5.2</span> <span class="toctext">Reference Documents</span></a></li>
<li class="toclevel-2 tocsection-59"><a href="#Forum_Posts"><span class="tocnumber">5.3</span> <span class="toctext">Forum Posts</span></a></li>
<li class="toclevel-2 tocsection-60"><a href="#Implementations"><span class="tocnumber">5.4</span> <span class="toctext">Implementations</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table>
<h2> <span class="mw-headline" id="Overview_and_Documentation"> Overview and Documentation </span></h2>
<p>The Floppy Disk Controller (FDC) is a (legacy) device that controls <b>internal</b>
 3.5/5.25 inch floppy disk drive devices on desktop x86 systems.
There are a range of chips that have been produced for this function 
which include: 8272A, 82078, 82077SL &amp; 82077AA. The 82077AA is the 
most
advanced, and has been produced since 1991. For more recent systems, a 
model of that chip has been embedded in the motherboard chipset.
(So pay close attention to that datasheet, below.)
</p>
<h3> <span class="mw-headline" id="Accessing_Floppies_in_Real_Mode"> Accessing Floppies in Real Mode </span></h3>
<p>For bootloaders or OSes that run with the CPU remaining in <a href="/Real_Mode" title="Real Mode">Real Mode</a>, use <a href="/BIOS#BIOS_functions" title="BIOS">BIOS Function</a>
INT13h AH=2 (read) or AH=3 (write) to access floppy drives. You need to 
know the "drive number" (typically 0 or 1), and put that value in DL.
More detailed info can be found in the <a href="/ATA_in_x86_RealMode_%28BIOS%29" title="ATA in x86 RealMode (BIOS)">ATA in x86 RealMode (BIOS)</a> article, because accessing a floppy is identical to accessing a hard disk
(using CHS) in Real Mode. The rest of this article deals with creating Protected Mode drivers for the floppy subsystem.
</p><p>Note: the Extended BIOS Int13h functions do not work with floppies.
</p><p>Note2: the BIOS IRQ0 handler remembers a timeout for turning the 
motor off, from the last BIOS floppy access. The last access may have 
been
attempting to load your bootloader. So, in the distant future, if the 
BIOS ever receives 36 more IRQ0 ticks (if you ever return to Real Mode)
it may turn off your floppy motors for you, once.
</p>
<h3> <span class="mw-headline" id="Accessing_USB_Floppy_Drives"> Accessing USB Floppy Drives </span></h3>
<p>All <a href="/USB" title="USB" class="mw-redirect">USB</a> devices, 
including USB floppy drives, are accessed indirectly (using SCSI-style 
commands encoded in USB datapackets) over the USB bus.
USB floppy drives do not use any of the IO ports or FDC commands 
described in this article.
</p>
<h3> <span class="mw-headline" id="The_Floppy_Subsystem_is_Ugly"> The Floppy Subsystem is Ugly </span></h3>
<p>Many of the devices that an OS controls in an x86 system have had 
functional patches added to them over the years. This makes them all
rather unpleasant when coding drivers. The floppy subsystem is probably 
the worst. As the functionality evolved, some
of the bit definitions were actually <b>reversed</b> in meaning, not 
merely made obsolete. Several commands require duplicating the
same information in two different locations -- and if the duplicated 
info doesn't match, the command fails. There were never definitive
flags added to identify which "mode" the controller is operating in. 
Also, the floppy
subsystem is the primary remaining one that accesses the obsolete and 
terrible ISA DMA system for its data transfers.
</p>
<h3> <span class="mw-headline" id="How_Many_Controllers.3F_One.21"> How Many Controllers? One! </span></h3>
<p>Each ribbon cable for floppy drives can support 2 drives. One floppy 
controller chip can control 2 floppy cables, for a total
of 4 drives. It is theoretically possible for a system to have more than
 one controller chip, but you will not find any existing systems with
more than one. If a system were to have more than one floppy controller,
 the second controller would be found at a base IO port address of 
0x370.
</p>
<h3> <span class="mw-headline" id="How_Many_Drives.3F"> How Many Drives? </span></h3>
<p>It is probably wisest to always get the drive count and types from <a href="/CMOS" title="CMOS">CMOS</a>, register 0x10.
</p>
<h3> <span class="mw-headline" id="The_Actual_Drive"> The Actual Drive </span></h3>
<p>In the olden days, there used to be 5.25 inch low-density, high-density, and single-sided drives. There used to be media
for each of these drive types. There also used to be 3.5 inch low density media. None of this really exists anymore. The only
actual hardware you will typically run into now is 3.5 inch, 1.44MB drives.
</p><p>A 1.44MB floppy disk is usually formatted with 80 cylinders, 2 sides, and 18 sectors per track. The drive records the two sides
with two "heads" that are bolted together. They cannot seek independently. The "track" on one side of a disk is always exactly
opposite the track on the other side of the disk. (There is a misconception about this in many floppy driver code examples.)
You only need to seek one head to find a particular cylinder, so that both heads may read/write that cylinder.
</p>
<h3> <span class="mw-headline" id="CHS"> CHS </span></h3>
<p>Floppy drives use CHS addressing exclusively. There are always 2 
heads (sides), but the driver (and controller) must also know how many 
cylinders and
sectors per track the media expects. Typically, as said above, it is 80 
cylinders and 18 sectors per track. In usual CHS fashion,
the cylinders and heads are counted starting with a 0 base, but the 
sector numbers start counting from 1. That is, legal cylinder
numbers are typically 0 to 79 inclusive, heads are 0 or 1, and sector 
numbers are 1 to 18 inclusive. Asking for sector number 0
is always highly illegal and this is a major source of errors in 
prototype driver code.
</p><p>It is, however, much  more logical to address things in LBA 
(Logical Block Addressing), as the first sector is at 0 (like an array).
Conversion between the two is rather simple. The equations are as 
follows:
</p><p><i>CYL = LBA / (HPC * SPT)</i>
</p><p><i>HEAD = (LBA % (HPC * SPT)) / SPT</i>
</p><p><i>SECT = (LBA % (HPC * SPT)) % SPT + 1</i>
</p><p><i>LBA = ( ( CYL * HPC + HEAD ) * SPT ) + SECT - 1</i>
</p><p>This can be described in C with the following code:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">void</span> lba_2_chs<span class="br0">(</span><span class="kw4">uint32_t</span> lba<span class="sy0">,</span> <span class="kw4">uint16_t</span><span class="sy0">*</span> cyl<span class="sy0">,</span> <span class="kw4">uint16_t</span><span class="sy0">*</span> head<span class="sy0">,</span> <span class="kw4">uint16_t</span><span class="sy0">*</span> sector<span class="br0">)</span>
<span class="br0">{</span>
    <span class="sy0">*</span>cyl    <span class="sy0">=</span> lba <span class="sy0">/</span> <span class="br0">(</span><span class="nu0">2</span> <span class="sy0">*</span> FLOPPY_144_SECTORS_PER_TRACK<span class="br0">)</span><span class="sy0">;</span>
    <span class="sy0">*</span>head   <span class="sy0">=</span> <span class="br0">(</span><span class="br0">(</span>lba <span class="sy0">%</span> <span class="br0">(</span><span class="nu0">2</span> <span class="sy0">*</span> FLOPPY_144_SECTORS_PER_TRACK<span class="br0">)</span><span class="br0">)</span> <span class="sy0">/</span> FLOPPY_144_SECTORS_PER_TRACK<span class="br0">)</span><span class="sy0">;</span>
    <span class="sy0">*</span>sector <span class="sy0">=</span> <span class="br0">(</span><span class="br0">(</span>lba <span class="sy0">%</span> <span class="br0">(</span><span class="nu0">2</span> <span class="sy0">*</span> FLOPPY_144_SECTORS_PER_TRACK<span class="br0">)</span><span class="br0">)</span> <span class="sy0">%</span> FLOPPY_144_SECTORS_PER_TRACK <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span></pre></div></div>
<p>You would then send this data to the floppy controller.
</p>
<h3> <span class="mw-headline" id="DMA_Data_Transfers"> DMA Data Transfers </span></h3>
<p>The floppy typically uses ISA DMA (which is <b>not</b> the same thing as PCI BusMastering DMA) to do data transfers. The floppy
is hardwired to DMA channel 2. The only other way of doing data transfers is called "PIO Mode" (see below).
</p><p>To do DMA data transfers:
Set up DMA channel 2 (as in the <a href="/DMA" title="DMA" class="mw-redirect">DMA</a> article) -- by setting the total transfer bytecount - 1, the target buffer physical address,
and the transfer direction.
</p><p>init/reset the controller if needed (see below), select the drive
 if needed (see below),
set up the floppy controller for DMA using the "specify" command,
seek to the correct cylinder, issue a sense interrupt command, then 
issue the standard read/write commands. The data transfer happens 
invisibly.
The controller will send an IRQ6 when the transfer is complete. Then 
read the "result" bytes to see if there were any errors.
See below for more detail.
</p>
<h3> <span class="mw-headline" id="PIO_Data_Transfers"> PIO Data Transfers </span></h3>
<p>PIO data transfers can either be done using polling or interrupts. 
Using PIO mode can transfer data 10 percent faster than a DMA
transfer, but there is an immense cost in CPU cycle requirements. 
However, if your OS or application is single-tasking, then there
is nothing else that the CPU cycles can be used for anyway, so you may 
as well use PIO mode.
</p><p>In general, the controller has a 16 byte buffer, and wants to 
send an IRQ6 whenever the buffer count reaches a "threshold" value that
is set by your driver. If you are using PIO mode floppy transfers in a 
multitasking environment (bad idea), then the IRQ6 events should
be used to fill or drain the floppy controller's buffer via some system 
buffer, in the interrupt handler code.
</p><p>If you are using PIO mode in a singletasking environment then the
 IRQ6s just waste CPU cycles, and you should be using polling instead.
You can usually shut the IRQs off by setting bit 3 (value = 8) of the 
Digital Output Register (see below). If you want, you can even
toggle that bit on and off for specific commands, so that you receive 
some types of interrupts but not others.
</p><p>To do PIO data transfers: init/reset the controller if needed 
(see below), select the drive if needed (see below),
seek to the correct cylinder, issue a sense interrupt command, then 
issue the standard read/write commands.
After you send the command, either poll the RQM bit in the Main Status 
Register to determine when the controller wants to have data moved
in/out of the FIFO buffer -- or wait for an IRQ6 to do the same thing. 
When the transfer is complete, read the "result" bytes to see
if there were any errors. See below for more detail.
</p>
<h4> <span class="mw-headline" id="Bochs_Can.27t_Handle_Polling_PIO"> Bochs Can't Handle Polling PIO </span></h4>
<p>If you try to turn off the IRQs in Bochs (to use pure polling PIO mode), Bochs will panic. It may also not be able to handle
non-DMA data transfers properly, even if IRQs are turned on. It is currently mainly designed to model the floppy using DMA.
</p>
<h3> <span class="mw-headline" id="There_are_3_.22Modes.22"> There are 3 "Modes" </span></h3>
<p>There were several generations of floppy controller chips on several 
generations of 80286 (and prior) computers, before
the 82077AA chip existed. The 82077AA was built to emulate all of them, 
by setting various pins on the chip to 5 volts.
The three modes are: PC-AT mode, PS/2 mode, and Model 30 mode. The most 
likely mode you will see on any hardware that
still runs is Model 30 mode. You may find some pre-1996 Pentium machines
 using PS/2 mode. Sadly, most emulator programs run in PS/2 mode!
In the documentation, you can ignore PC-AT mode. Or you can try to 
handle all three, by only using registers and commands that are 
identical
in all 3 modes.
</p>
<h3> <span class="mw-headline" id="Most_Commands_Run_.22Silently.22"> Most Commands Run "Silently" </span></h3>
<p>There are only a few commands/conditions that produce interrupts: a 
reset (in polling mode only), Seek, Recalibrate, or one of the
read/write/verify/format commands. Several commands do not produce any 
result bytes, either. If you want to verify that a silent
command actually worked, just about the only thing you can do is use the
 Dumpreg command to check the current state of the
controller.
</p>
<h3> <span class="mw-headline" id="Timing_Issues"> Timing Issues </span></h3>
<p>On real hardware, there are definite timing issues. Seek delays and 
motor delays are just what any programmer would expect. It
would be nice if the drive would send an IRQ when the motor was up to 
speed, but it does not. Two things that you may not
expect are that quite new hardware probably still needs artificial 
delays between outputting "command/parameter" bytes, and that you
probably also need artificial delays between inputting "result" bytes. 
There is a bit in the MSR to test in order to know when the
next byte can be sent/retrieved. It is not a good idea to simply 
hardcode specific delays between output/input bytes.
Looping 20 times, and testing the value of the RQM bit in the MSR each 
time, should always be a sufficient "timeout".
</p><p>However, using IO Port reads to generate delays (or polling MSR) leads to poor performance in a multitasking environment, and
you may want to put the driver to sleep for the shortest possible period (microsleep), instead.
</p>
<h3> <span class="mw-headline" id="Reliability"> Reliability </span></h3>
<p>In real hardware, floppy drives are extremely unreliable. On emulators, it doesn't matter -- but for code that is intended for
real hardware, make sure to retry every command at least twice more after any error.
</p>
<h2> <span class="mw-headline" id="Registers"> Registers </span></h2>
<p>The floppy controller is programmed through 9 registers, which can be
 accessed through IO ports 0x3F0 through 0x3F7 (excluding 0x3F6). As 
usual on the
PC architecture, some of those IO ports access different controller 
registers depending on whether you read from or write to them.
Note that code snippets and datasheets name these registers based on 
their trigrams (e.g. SRA, MSR, DIR, CCR, etc.).
Use standard "outb" and "inb" commands to access the registers.
</p><p>The basic set of floppy registers can be found in the following enumeration:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw2">enum</span> FloppyRegisters
<span class="br0">{</span>
   STATUS_REGISTER_A                <span class="sy0">=</span> <span class="nu12">0x3F0</span><span class="sy0">,</span> <span class="co1">// read-only</span>
   STATUS_REGISTER_B                <span class="sy0">=</span> <span class="nu12">0x3F1</span><span class="sy0">,</span> <span class="co1">// read-only</span>
   DIGITAL_OUTPUT_REGISTER          <span class="sy0">=</span> <span class="nu12">0x3F2</span><span class="sy0">,</span>
   TAPE_DRIVE_REGISTER              <span class="sy0">=</span> <span class="nu12">0x3F3</span><span class="sy0">,</span>
   MAIN_STATUS_REGISTER             <span class="sy0">=</span> <span class="nu12">0x3F4</span><span class="sy0">,</span> <span class="co1">// read-only</span>
   DATARATE_SELECT_REGISTER         <span class="sy0">=</span> <span class="nu12">0x3F4</span><span class="sy0">,</span> <span class="co1">// write-only</span>
   DATA_FIFO                        <span class="sy0">=</span> <span class="nu12">0x3F5</span><span class="sy0">,</span>
   DIGITAL_INPUT_REGISTER           <span class="sy0">=</span> <span class="nu12">0x3F7</span><span class="sy0">,</span> <span class="co1">// read-only</span>
   CONFIGURATION_CONTROL_REGISTER   <span class="sy0">=</span> <span class="nu12">0x3F7</span>  <span class="co1">// write-only</span>
<span class="br0">}</span><span class="sy0">;</span></pre></div></div>
<p>All commands, parameter information, result codes, and disk data transfers go through the FIFO port.
MSR contains the "busy" bitflags, that must be checked before reading/writing each byte through the FIFO.
DOR controls the floppy drive motors, floppy drive "selection", and resets.
The other registers contain very little information, and are typically accessed very little, if at all.
</p><p>Note: IO port 0x3F6 is the ATA (hard disk) Alternate Status register, and is not used by any floppy controller.
</p><p>Note2: some people prefer to give the registers values based on their offset from the base address, and then add the
FDC's base address (0x3F0 or 0x370). So STATUS_REGISTER_A would have value 0, STATUS_REGISTER_B value 1, etc., and to
access STATUS_REGISTER_B on FDC 1, you would use FDC1_BASE_ADDRESS + STATUS_REGISTER_B = 0x370 + 1 = 0x371.
</p><p>As said above, the most common controller chip has 3 modes, and 
many bitflags in the registers are different (or opposite!) depending on
the mode. However, all of the important registers and bitflags remain 
the same between modes.
They are the following:
</p>
<h3> <span class="mw-headline" id="FIFO_and_Tape_Drive_Registers"> FIFO and Tape Drive Registers </span></h3>
<p>FIFO: The FIFO register may not have a 16byte buffer in all modes, 
but this is a minor difference that does not really affect its 
operation.
</p><p>TDR: The Tape Drive Register is identical in all modes, but it is
 useless (you will never find functional equipment that requires it).
</p>
<h3> <span class="mw-headline" id="DOR_bitflag_definitions"> DOR bitflag definitions </span></h3>
<table style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; {{{1}}}" border="2" cellpadding="4" cellspacing="0">

<tbody><tr>
<th> Mnemonic
</th>
<th> bit number
</th>
<th> value
</th>
<th> meaning/usage
</th></tr>
<tr>
<td> MOTD
</td>
<td> 7
</td>
<td> 0x80
</td>
<td> Set to turn drive 3's motor ON
</td></tr>
<tr>
<td> MOTC
</td>
<td> 6
</td>
<td> 0x40
</td>
<td> Set to turn drive 2's motor ON
</td></tr>
<tr>
<td> MOTB
</td>
<td> 5
</td>
<td> 0x20
</td>
<td> Set to turn drive 1's motor ON
</td></tr>
<tr>
<td> MOTA
</td>
<td> 4
</td>
<td> 0x10
</td>
<td> Set to turn drive 0's motor ON
</td></tr>
<tr>
<td> IRQ
</td>
<td> 3
</td>
<td> 8
</td>
<td> Set to enable IRQs and DMA
</td></tr>
<tr>
<td> RESET
</td>
<td> 2
</td>
<td> 4
</td>
<td> Clear = enter reset mode, Set = normal operation
</td></tr>
<tr>
<td> DSEL1 and 0
</td>
<td> 0, 1
</td>
<td> 3
</td>
<td> "Select" drive number for next access
</td></tr></tbody></table>
<p>Note: the IRQ/DMA enable bit (bit 3, value = 8) cannot be cleared in 
"PS/2 mode", so for PIO transfers you should make sure to have a stubbed
 IRQ6 handler
in place, just in case the IRQs happen anyway. The bit <b>must</b> be set for DMA to function.
</p><p>Note2: if you want to execute a command that accesses a disk (see
 the command list below), then that respective disk must have its
motor spinning (and up to speed), <b>and</b> its "select" bits must be set in the DOR, <b>first</b>.
</p><p>Note3: toggling DOR reset state requires a 4 microsecond delay. It may be smarter to use DSR reset mode, because
the hardware "untoggles" reset mode automatically after the proper delay.
</p>
<h3> <span class="mw-headline" id="MSR_bitflag_definitions"> MSR bitflag definitions </span></h3>
<table style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; {{{1}}}" border="2" cellpadding="4" cellspacing="0">

<tbody><tr>
<th> Mnemonic
</th>
<th> bit number
</th>
<th> value
</th>
<th> meaning/usage
</th></tr>
<tr>
<td> RQM
</td>
<td> 7
</td>
<td> 0x80
</td>
<td> Set if it's OK (or mandatory) to exchange bytes with the FIFO IO port
</td></tr>
<tr>
<td> DIO
</td>
<td> 6
</td>
<td> 0x40
</td>
<td> Set if FIFO IO port expects an IN opcode
</td></tr>
<tr>
<td> NDMA
</td>
<td> 5
</td>
<td> 0x20
</td>
<td> Set in Execution phase of PIO mode read/write commands only.
</td></tr>
<tr>
<td> CB
</td>
<td> 4
</td>
<td> 0x10
</td>
<td> Command Busy: set when command byte received, cleared at end of Result phase
</td></tr>
<tr>
<td> ACTD
</td>
<td> 3
</td>
<td> 8
</td>
<td> Drive 3 is seeking
</td></tr>
<tr>
<td> ACTC
</td>
<td> 2
</td>
<td> 4
</td>
<td> Drive 2 is seeking
</td></tr>
<tr>
<td> ACTB
</td>
<td> 1
</td>
<td> 2
</td>
<td> Drive 1 is seeking
</td></tr>
<tr>
<td> ACTA
</td>
<td> 0
</td>
<td> 1
</td>
<td> Drive 0 is seeking
</td></tr></tbody></table>
<p>The two important bits are RQM and DIO. NDMA and BUSY are also useful
 in polling PIO mode.
Most important is RQM, which is set when it is OK (or necessary!) to 
read/write data from/to the FIFO port.
NDMA signals the end of the "execution phase" of a command, and the 
beginning of "result phase".
DIO and BUSY should be checked to verify proper command termination (the
 end of "result phase" and beginning of "command phase").
</p>
<h3> <span class="mw-headline" id="CCR_and_DSR"> CCR and DSR </span></h3>
<p>The bottom 2 bits of DSR match CCR, and setting one of them sets the 
other. The upper 6 bits on both DSR and CCR default to 0, and
can always be set to zero safely. So, even though they have different 
bit definitions, you always set them with identical values, and
one or the other of DSR and CCR can be ignored in any modern system.
Alternately, you can always set both of them, for maximum compatibility 
with ancient chipsets.
</p><p>The bottom 2 bits specify the data transfer rate to/from the 
drive. You want both bits set to zero for a 1.44MB or 1.2MB floppy 
drive.
So generally, you want to set CCR to zero just once, after bootup 
(because the BIOS may not have done it, unless it booted a floppy disk).
</p><p>Note: a reset procedure does not affect this register. However, if you have drives of different types on the bus which
use different datarates, then you need to switch the datarate when you select the other drive. It also seems to be possible
to modify this register while the FDC is in "reset state".
</p><p>Note2: some tutorials seem to claim that changing/setting the datarate causes an IRQ6. This is false.
</p><p>Datarates used for setting either DSR or CCR:
</p>
<pre>Datarate   value   Drive Type
1Mbps        3       2.88M
500Kbps      0       1.44M, 1.2M
</pre>
<p>Note: There is also a 300Kbps (value = 1), and a 250Kbps setting 
(value = 2) but they are only for utterly obsolete drives/media.
</p>
<h3> <span class="mw-headline" id="DIR_register.2C_Disk_Change_bit"> DIR register, Disk Change bit </span></h3>
<p>This bit (bit 7, value = 0x80) is fairly useful. It gets set if the 
floppy door was opened/closed. Sadly, almost all the emulator
programs set and clear this bit completely inappropriately (especially 
after a reset).
Do not trust your handling of this bit until you have tested the 
functionality on real hardware.
</p><p>Note: The datasheet is very confusing about the value of the bit, because Model 30 mode shows the bit as being inverted. But
in Model 30 mode, the <b>signal</b> is also inverted, so it comes out the same. "False" always means the bit is cleared, and
"true" always means the bit is set.
</p><p>Note2: You must turn on the drive motor bit before you access the DIR register for a selected drive (you do not have to wait
for the motor to spin up, though). It may also be necessary to read the register five times (discard the first 4 values) when
<b>changing</b> the selected drive -- because "selecting" sometimes takes a little time.
</p><p>Basically, you want to keep a flag for whether there is media in each drive. If Disk Change is set and there was media,
the OS should get a signal that the previous media was ejected.
</p><p>Once the Disk Change bit signals "true" (and you have processed that "event"), you need to try to clear the bit. The main way to
clear the bit is with a <b>successful</b> Seek/Recalibrate to a <b>new</b> cylinder on the media. (A reset does not work. If the
controller thinks the heads are already on the correct cylinder, it will eat a Seek command without clearing the Disk
Change bit. If the heads are already on cylinder 0, a Recalibrate is also a no-op.) If the seek <b>fails</b>, you can be fairly
certain that there is no media in the drive anymore. It is important to note that
this means you should check the value of Disk Change just prior to every Seek command that you do, because otherwise you
will lose any Disk Change information. This is also true for implied seeks, and relative seeks.
</p><p>Apparently a small number of floppy drives also support one additional way to clear the bit -- something that
Linux calls a "twaddle". Simply toggle the drive motor bit on, off, and then on again. When your driver tries to clear the
Disk Change bit the first time, it can try a twaddle, and see if it works, and keep a flag if it does.
</p><p><br>
</p>
<h2> <span class="mw-headline" id="Programming_Details"> Programming Details </span></h2>
<p>Overall, the controller needs to be initialized and reset once (see below for the steps involved). Then drives can be
accessed. To access drives:
</p>
<ol><li> Turn on the drive's motor and select the drive, using an "outb" command to the DOR IO port.
</li><li> Wait for awhile for the motor to get up to speed, using some waiting scheme.
</li><li> Issue your command byte plus some parameter bytes (the "command phase") to the FIFO IO port.
</li><li> Exchange data with the drive / "seek" the drive heads (the "execution phase"), on the FIFO IO port.
</li><li> Get an IRQ6 at the end of the execution phase, but <b>only if the command HAS an execution phase</b>.
</li><li> Read any "result bytes" produced by the command (the "result phase"), on the FIFO IO port.
</li><li> The commands "Recalibrate", "Seek", and "Seek Relative" do not
 have a result phase, and require an additional "Sense Interrupt" 
command to be sent.
</li></ol>
<p>And then you are ready for the next command. See below for more detail on how to issue a command.
</p>
<h3> <span class="mw-headline" id="Motor_Delays"> Motor Delays </span></h3>
<p>Note: the Linux floppy driver sourcecode has a comment that claims that turning on the MOTC or MOTD bits in the DOR
can completely lock up some systems. This claim seems unlikely?
</p><p>When you turn a floppy drive motor on, it takes quite a few 
milliseconds to "spin up" -- to reach the (stabilized) speed
needed for data transfer. The controller has electronics to handle a 
large variation in rotation speed, but it has its limits.
If you start reading/writing immediately after the motor is turned on, 
"the PLL will fail to lock on to the data signal" and you will get an 
error.
</p><p>After you are done reading (or writing), you should typically 
wait an additional two seconds to turn the motor off. (It may also be 
smart
to seek the heads back to cylinder 0 just before turning the motor off.)
 You could leave the motor on longer,
but it might give the user the idea that the floppy is still 
transferring data and that it's taking an awfully long time.
The reason to leave the motor on is that your driver may not know if 
there is a queue of sector reads or writes
that are going to be executed next. If there are going to be more drive 
accesses immediately, they won't need to wait
for the motor to spin up.
</p><p>The suggested delays when turning the motor on are:
</p>
<ul><li> 300 milliseconds (for a 3.5" floppy).
</li><li> 500 milliseconds (for a 5.25" floppy).
</li></ul>
<p>These values should be more than enough for any floppy drive to spin up correctly. 50ms should be sufficient, in fact.
</p><p>Another functional method is not delaying or waiting at all, but just enter a loop and keep retrying any command until it works.
A 3.5 inch disk rotates once every 200ms, so each retry is effectively a delay.
</p>
<h3> <span class="mw-headline" id="Gap_Lengths"> Gap Lengths </span></h3>
<p>There are two different gap lengths that are controlled by software 
for specifying the amount of blank space between sectors.
The gap lengths are used by the floppy hardware to help find the "start 
of sector" markers, and to avoid problems caused by speed variations
in different floppy drives (for e.g. writing a sector on a slower drive 
would cause the sector to take up more physical space on the disk,
potentially overwriting the next sector). The first gap length 
(typically called "GPL1") is used when reading or writing data, and sets
 the
length of the gap between sectors that the floppy should expect (but 
doesn't change this gap). The second (typically called "GPL2")
is the gap length for the "format track" command, which specifies the 
amount of space between sectors to use. The actual gap lengths depend on
 many factors,
but GPL1 is always a bit less than GPL2 so that the floppy hardware 
starts expecting the next sector near the end of the blank space.
</p><p>Standard values for these gap lengths can be found in the floppy 
controller datasheets. However, it is possible to squeeze more sectors
on each track by reducing the gap length. For example, by using a gap 
length of 0x1C when formatting (and 0x0C when reading/writing)
instead of 0x54 (and 0x1B when reading/writing) it's possible to format a
 normal 1440 KB floppy disk with 21 sectors per track to create
a 1680Kb floppy disk. These disks may be unreliable on very old 
computers (where accuracy and speed variation may be worse),
but were considered reliable enough for Microsoft to distribute a 
version of Windows on 1680Kb floppies (Windows 95 on a set of 12 
floppies).
It is also possible to format 3 extra cylinders on each disk, for a 
total of 83.
</p>
<h3> <span class="mw-headline" id="Hardware_Control_of_Bad_Cylinders"> Hardware Control of Bad Cylinders </span></h3>
<p>The FDC subsystem has a built-in method for handling unreliable 
media. However, it is probably not a good idea to use it.
It involves finding a bad sector on the media, and then marking the 
entire track or cylinder as being bad, during the formatting process.
</p><p>If you try to do this, then you cannot simply seek to a cylinder.
 All of the cylinders get "remapped" with new "TrackID"s. Whenever
you seek to a cylinder, then you need to use the ReadID command to 
verify that the cylinder you seeked to contains the data that you
actually want. So this eliminates any possibility of using implied 
seeks, and adds an extra step to most read/write operations.
</p>
<h3> <span class="mw-headline" id="Procedures"> Procedures </span></h3>
<h4> <span class="mw-headline" id="Reinitialization"> Reinitialization </span></h4>
<p>The BIOS probably leaves the controller in its default state. "Drive 
polling mode" on, FIFO off, threshold = 1, implied seek off,
lock off. This is a lousy state for the controller to be in, and your OS
 will need to fix it. The BIOS probably also does not have
any better guess as to the proper values for the "Specify" command than 
your OS does (the values are specific to the particular
drive). There is certainly no reason why you should trust the BIOS to 
have done any of it <b>correctly.</b>
</p><p>So, when your OS is initializing:
</p>
<ol><li> Send a Version command to the controller.
</li><li> Verify that the result byte is 0x90 -- if it is not, it might 
be a good idea to abort and not support the floppy subsystem. Almost all
 of the code based on this article will work, even on the oldest 
chipsets -- but there are a few commands that will not.
</li><li> If you don't want to bother having to send another Configure command after every Reset procedure, then:
<ol><li> Send a better Configure command to the controller. A suggestion
 would be: drive polling mode off, FIFO on, threshold = 8, implied seek 
on, precompensation 0.
</li><li> send a Lock command.
</li></ol>
</li><li> Do a Controller Reset procedure.
</li><li> Send a Recalibrate command to each of the drives.
</li></ol>
<h4> <span class="mw-headline" id="Controller_Reset"> Controller Reset </span></h4>
<p>The second most common failure mode for any floppy command is for the
 floppy controller to lock up forever. This
condition is detected with a timeout, and needs to be fixed with a 
Reset. You also need one Reset during initialization. Hopefully, it is
the only one you will ever need to do.
</p>
<ol><li> Either use:
<ol><li> Bit 2 (value = 4) in the DOR: Save the current/"original" value
 of the DOR, write a 0 to the DOR, wait 4 microseconds, then write the 
original value (bit 2 is always set) back to the DOR.
</li><li> <b>or</b> Bit 7 (value = 0x80) in the DSR: Precalculate a good
 value for the DSR (generally 0), and OR it with 0x80. Write that value 
to the DSR.
</li></ol>
</li><li> Wait for the resulting IRQ6 (unless you have IRQs turned off in the DOR)
</li><li> If (and only if) <a href="#Configure">drive polling mode</a> is turned on, send 4 Sense Interrupt commands (required).
</li><li> If your OS/driver never sent a Lock command, then you probably
 need to send a new Configure command (the fifo settings were lost in 
the reset).
</li><li> Do a Drive Select procedure for the next drive to be accessed.
</li></ol>
<p>Note: A reset clears all the Specify information, so the next Select 
procedure must send a new Specify command (use some sort of flag to tell
 the
driver to do this).
</p><p>Note2: Emulators will often set the Disk Change flag to "true" after a reset, <b>but this does not happen on real hardware</b>
 -- it is
a shared bug in all the emulators that do it. Another shared bug is that
 most emulators do not fire an IRQ6 if disk polling mode is off.
</p><p>Note3: A reset does not change the <a href="#Configure">drive polling mode or implied seek</a> settings.
</p>
<h4> <span class="mw-headline" id="Drive_Selection"> Drive Selection </span></h4>
<p>Each floppy drive on the system may be a different type. When switching between accessing different types of drives, you need
to fix the Specify and Datarate settings in the controller. The controller does <b>not</b> remember the settings on a per-drive
basis. The only per-drive number that it remembers is the current cylinder.
</p>
<ol><li> Send the correct Datarate setting to CCR. Usually this is a 0 (1.44MB floppy drive).
</li><li> If the newly selected drive is a different type than the 
previously selected drive (or changing from PIO to DMA mode), send a new
 Specify command.
</li><li> Set the "drive select" bits (and the other bitflags) in DOR 
properly, including possibly turning on the Motor bit for the drive (if 
it will be accessed soon).
</li></ol>
<h4> <span class="mw-headline" id="Detecting_Media"> Detecting Media </span></h4>
<p>The user can swap media out of a floppy drive at any moment. If your driver sends a command to the drive, and the
command fails -- this may be the reason why.
</p>
<ol><li> Turn the drive motor bit on.
</li><li> Read DIR. If the "Disk Change" bitflag is set to "true", then 
the floppy drive door was opened, so the OS needs to test if a new disk 
is in the drive.
</li></ol>
<h4> <span class="mw-headline" id="Waiting"> Waiting </span></h4>
<p>Waiting for the drive can be done in many ways, and it is an OS-specific design decision. You can poll the value of
the PIT, waiting for it to count down to a certain value. You can poll a memory location that contains "the current time"
in some format, waiting for it to reach a certain value. Your OS can implement a realtime callback, where a particular function
in the driver will be called at a particular time. Or you can implement some form of multitasking "blocking", where the driver
process is put in a "sleep" state, and is not assigned any timeslices for a certain length of time.
</p>
<h4> <span class="mw-headline" id="The_Proper_Way_to_issue_a_command"> The Proper Way to issue a command </span></h4>
<ol><li> Read MSR (port 0x3F4).
</li><li> Verify that RQM = 1 and DIO = 0 ((Value &amp; 0xc0) == 0x80) -- if not, reset the controller and start all over.
</li><li> Send your chosen command byte to the FIFO port (port 0x3F5).
</li><li> In a loop: loop on reading MSR until RQM = 1. Verify DIO = 0, 
then send the next parameter byte for the command to the FIFO port.
</li><li> Either Execution or Result Phase begins when all parameter 
bytes have been sent, depending on whether you are in PIO mode, and the 
command has an Execution phase. If using DMA, or the command does not 
perform read/write/head movement operations, skip to the Result Phase.
</li><li> (In PIO Mode Execution phase) read MSR, verify NDMA = 1 
((Value &amp; 0x20) == 0x20) -- if it's not set, the command has no 
Execution phase, so skip to Result phase.
</li><li> begin a loop:
</li><li> Either poll MSR until RQM = 1, or wait for an IRQ6, using some waiting method.
</li><li> In an inner loop: transfer a byte in or out of the FIFO port 
via a system buffer, then read MSR. Repeat while RQM = 1 and NDMA = 1 
((Value &amp; 0xa0) == 0xa0).
</li><li> if NDMA = 1, loop back to the beginning of the outer loop, unless your data buffer ran out (detect underflow/overflow).
</li><li> Result Phase begins. If the command does not have a Result phase, it silently exits to waiting for the next command.
</li><li> If using DMA on a read/write command, wait for a terminal IRQ6.
<ol><li> Loop on reading MSR until RQM = 1, verify that DIO = 1.
</li><li> In a loop: read the next result byte from the FIFO, loop on 
reading MSR until RQM = 1, verify CMD BSY = 1 and DIO = 1 ((Value &amp; 
0x50) == 0x50).
</li></ol>
</li><li> After reading all the expected result bytes: check them for error conditions, verify that RQM = 1, CMD BSY = 0, and DIO = 0. <b>If not</b> retry the entire command again, several times, starting from step 2!
</li></ol>
<p>Note: implementing a failure timeout for each loop and the IRQ is 
pretty much required -- it is the only way to detect many command 
errors.
</p>
<h3> <span class="mw-headline" id="Commands"> Commands </span></h3>
<p>Each command is a single byte with a value less than 32, which is 
written to the DATA_FIFO port. There are three "option bits"
that can be OR'ed onto some command bytes, typically called MF, MT, and 
SK. Each command must be followed by a specific set of
"parameter bytes", and returns a specific set of "result bytes". See the
 discussion of each command for its list of parameter bytes,
and result bytes.
</p><p>A command byte may only be sent to the FIFO port if the RQM bit is 1 and the DIO bit is 0, in the MSR. If these
bits are not correct, then the previous command encountered a fatal error, and you must issue a <a href="#Controller_Reset">reset</a>.
</p><p>The following is an enumeration of the values of the command bytes. The ones that you actually will <b>use</b> are marked
with a * and a comment.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw2">enum</span> FloppyCommands
<span class="br0">{</span>
   READ_TRACK <span class="sy0">=</span>                 <span class="nu0">2</span><span class="sy0">,</span>	<span class="co1">// generates IRQ6</span>
   SPECIFY <span class="sy0">=</span>                    <span class="nu0">3</span><span class="sy0">,</span>      <span class="co1">// * set drive parameters</span>
   SENSE_DRIVE_STATUS <span class="sy0">=</span>         <span class="nu0">4</span><span class="sy0">,</span>
   WRITE_DATA <span class="sy0">=</span>                 <span class="nu0">5</span><span class="sy0">,</span>      <span class="co1">// * write to the disk</span>
   READ_DATA <span class="sy0">=</span>                  <span class="nu0">6</span><span class="sy0">,</span>      <span class="co1">// * read from the disk</span>
   RECALIBRATE <span class="sy0">=</span>                <span class="nu0">7</span><span class="sy0">,</span>      <span class="co1">// * seek to cylinder 0</span>
   SENSE_INTERRUPT <span class="sy0">=</span>            <span class="nu0">8</span><span class="sy0">,</span>      <span class="co1">// * ack IRQ6, get status of last command</span>
   WRITE_DELETED_DATA <span class="sy0">=</span>         <span class="nu0">9</span><span class="sy0">,</span>
   READ_ID <span class="sy0">=</span>                    <span class="nu0">10</span><span class="sy0">,</span>	<span class="co1">// generates IRQ6</span>
   READ_DELETED_DATA <span class="sy0">=</span>          <span class="nu0">12</span><span class="sy0">,</span>
   FORMAT_TRACK <span class="sy0">=</span>               <span class="nu0">13</span><span class="sy0">,</span>     <span class="co1">// *</span>
   DUMPREG <span class="sy0">=</span>                    <span class="nu0">14</span><span class="sy0">,</span>
   SEEK <span class="sy0">=</span>                       <span class="nu0">15</span><span class="sy0">,</span>     <span class="co1">// * seek both heads to cylinder X</span>
   VERSION <span class="sy0">=</span>                    <span class="nu0">16</span><span class="sy0">,</span>	<span class="co1">// * used during initialization, once</span>
   SCAN_EQUAL <span class="sy0">=</span>                 <span class="nu0">17</span><span class="sy0">,</span>
   PERPENDICULAR_MODE <span class="sy0">=</span>         <span class="nu0">18</span><span class="sy0">,</span>	<span class="co1">// * used during initialization, once, maybe</span>
   CONFIGURE <span class="sy0">=</span>                  <span class="nu0">19</span><span class="sy0">,</span>     <span class="co1">// * set controller parameters</span>
   LOCK <span class="sy0">=</span>                       <span class="nu0">20</span><span class="sy0">,</span>     <span class="co1">// * protect controller params from a reset</span>
   VERIFY <span class="sy0">=</span>                     <span class="nu0">22</span><span class="sy0">,</span>
   SCAN_LOW_OR_EQUAL <span class="sy0">=</span>          <span class="nu0">25</span><span class="sy0">,</span>
   SCAN_HIGH_OR_EQUAL <span class="sy0">=</span>         <span class="nu0">29</span>
<span class="br0">}</span><span class="sy0">;</span></pre></div></div>
<h4> <span class="mw-headline" id="Option_bits"> Option bits </span></h4>
<p>OR these bits onto the above read/write/format/verify commands.
</p>
<h5> <span class="mw-headline" id="Bit_MT"> Bit MT </span></h5>
<p>Value = 0x80. Multitrack mode. The controller will switch automatically from Head 0 to Head 1
at the end of the track. This allows you to read/write twice as much data with a single command.
</p>
<h5> <span class="mw-headline" id="Bit_MF"> Bit MF </span></h5>
<p>Value = 0x40. "MFM" magnetic encoding mode. Always set it for read/write/format/verify operations.
</p>
<h5> <span class="mw-headline" id="Bit_SK"> Bit SK </span></h5>
<p>Value = 0x20. Skip mode. Ignore this bit and leave it cleared, unless you have a really good reason not to.
</p>
<h4> <span class="mw-headline" id="Status_Registers"> Status Registers </span></h4>
<p>There are 3 registers that hold information about the last error encountered. The st0 register information
is passed back with the result bytes of most commands. The st1 and st2 information is returned in the result
bytes of read/write commands. They can also be retrieved with a Dumpreg command.
</p>
<h5> <span class="mw-headline" id="st0"> st0 </span></h5>
<p>The top 2 bits (value = 0xC0) are set after a reset procedure, with polling on. Either bit being set at any other
time is an error indication.
Bit 5 (value = 0x20) is set after every Recalibrate, Seek, or an implied seek. The other bits are not useful.
</p>
<h5> <span class="mw-headline" id="st1"> st1 </span></h5>
<p>The st1 register provides more detail about errors during read/write operations.
</p><p>Bit 7 (value = 0x80) is set if the floppy had too few sectors on it to complete a read/write. This is often
caused by <b>not subtracting 1</b> when setting the DMA byte count.
Bit 4 (value = 0x10) is set if your driver is too slow to get bytes in or out of the FIFO port in time.
Bit 1 (value = 2) is set if the media is write protected.
The rest of the bits are for various types of data errors; indicating bad media, or a bad drive.
</p>
<h5> <span class="mw-headline" id="st2"> st2 </span></h5>
<p>The st2 register provides more (useless) detail about errors during read/write operations.
</p><p>The bits all indicate various types of data errors for either bad media, or a bad drive.
</p><p><br>
</p>
<h4> <span class="mw-headline" id="Configure"> Configure </span></h4>
<p>This command initializes controller-specific values: the data buffer 
"threshold" value, implied seek enable, FIFO disable, polling enable.
(And "Write Precompensation".) A good setting is: implied seek on, FIFO 
on, drive polling mode off, threshold = 8, precompensation 0.
</p><p>If you enable implied seeks, then you don't have to send Seek commands (or Sense Interrupt commands for the Seek commands).
</p><p>If you leave the FIFO disabled, then it cannot buffer data -- you
 will get an IRQ6 or DMA request for every single byte (which needs
to be serviced quickly, because the very next byte will automatically 
cause an overflow/underflow and error out your
transfer!).
</p><p>Drive polling mode is just an annoyance that is there for backwards software compatibility. It makes you need Sense Interrupts
after every reset. Always turn it off, if you send a Configure command.
</p><p>A big "threshold" such as 15 will wait 15 bytes between interrupts. So there won't be many interrupts, but you only
have one byte left in the FIFO before it overflows/underflows and kills the r/w operation. thresh_val = threshold - 1.
</p><p>Write precompensation is a technical thing having to do with drive head magnetics. A precomp_val of 0 tells the controller/drive
to use the manufacturer default value. Use that unless you have a very good reason for setting another value.
</p>
<ul><li> Configure command = 0x13
</li><li> First parameter byte = 0
</li><li> Second parameter byte = (implied seek ENable &lt;&lt; 6) | (fifo <b>DIS</b>able &lt;&lt; 5) | (drive polling mode <b>DIS</b>able &lt;&lt; 4) | thresh_val (= threshold - 1)
</li><li> Third parameter byte = precomp_val = 0
</li><li> No result bytes.
</li><li> No interrupt.
</li></ul>
<h4> <span class="mw-headline" id="Version"> Version </span></h4>
<p>Returns one byte. If the value is 0x90, the floppy controller is a 82077AA.
</p>
<ul><li> Version command = 0x10
</li><li> No parameter bytes.
</li><li> No interrupt.
</li><li> First result byte = 0x90
</li></ul>
<h4> <span class="mw-headline" id="Lock"> Lock </span></h4>
<p>Under default circumstances, every Controller Reset will disable the fifo, and set the fifo threshold to 1 (thresh_val = 0).
If you change these settings with the Configure command and don't want to have to fix them after every Controller Reset,
then you can send a Lock command with the lock bit turned on. You can "unset" the lock, by sending another Lock command
with the lock bit turned off. Use the MT option bit as the lock bit.
</p>
<ul><li> Lock command = 0x94
</li><li> <b>or</b> Unlock command = 0x14
</li><li> No parameter bytes.
</li><li> No interrupt.
</li><li> First result byte = lock bit &lt;&lt; 4
</li></ul>
<h4> <span class="mw-headline" id="Specify"> Specify </span></h4>
<p>This command puts information in the controller about the next disk drive to be accessed.
</p><p><b>Important Note:</b> The controller only has one set of registers for this information. It does not <b>store</b> the information
between multiple drives. So if you are switching control between two different types of drives (with different specify values)
then you need to send a new Specify command every single time you select the other drive.
</p><p>If your driver will be using DMA to transfer data, set the NDMA bit to 0. If using PIO mode instead, set it to 1.
</p>
<ul><li> Specify command = 0x3
</li><li> First parameter byte = SRT_value &lt;&lt; 4 | HUT_value
</li><li> Second parameter byte = HLT_value &lt;&lt; 1 | NDMA
</li><li> No result bytes.
</li><li> No interrupt.
</li></ul>
<h5> <span class="mw-headline" id="SRT.2C_HLT_and_HUT"> SRT, HLT and HUT </span></h5>
<p>These parameters sent with the Specify command to the controller are meant to optimize drive performance, and head lifetime.
</p><p>The values are specific to the exact model, condition, and age of
 floppy drive installed on the system. The values sent by the driver to 
the
controller were always meant
to be <b>adaptive</b>. That is, your driver is theoretically supposed to
 keep statistics of how often Seek commands fail with the current
setting of SRT. If they always work, and your driver wants to optimize 
performance, then it can send a new Specify command, with the SRT
value reduced by 1. Then begin keeping new statistics. Similarly for HLT
 regarding Read/Write operations. As drives age and collect
dirt, the driver would automatically compensate by seeing higher 
statistical error rates, and increase the values of SRT and HLT.
</p><p>Keeping statistics in that way only works when the drive in 
question is used often. Now that internal floppy drives are nearly 
obsolete,
it is worthless. So the current recommendation is just to use very safe 
values, and forget about performance.
</p><p>If you look up spec sheets for individual floppy drives, they 
usually show a worst-case "track to track seek time" = SRT, but not the 
other two.
</p>
<ul><li> SRT = "Step Rate Time" = time the controller should wait for 
the head assembly to move between successive cylinders. A reasonable 
amount of time
</li></ul>
<p>to allow for this is 3ms for modern 3.5 inch floppy drives. A very 
safe amount would be 6 to 8ms. To calculate the value for the SRT 
setting
from the given time, use "SRT_value = 16 - (milliseconds * data_rate / 
500000)". For a 1.44 MB floppy and 8ms delay this gives "SRT_value =
16 - (8 * 500000 / 500000)" or a parameter value of 8.
</p>
<ul><li> HLT = "Head Load Time" = time the controller should wait between activating a head and actually performing a read/write.
</li></ul>
<p>A reasonable value for this is around 10ms. A very safe amount would be 30ms. To calculate the value for the HLT setting
from the given time, use "HLT_value = milliseconds * data_rate / 1000000".
For a 1.44 MB floppy and a 10ms delay this gives "HLT_value = 10 * 500000 / 1000000" or 5.
</p>
<ul><li> HUT = "Head Unload Time" = time the controller should wait 
before deactivating the head. To calculate the value for the HUT setting
</li></ul>
<p>from a given time, use "HUT_value = milliseconds * data_rate / 
8000000".
For a 1.44 MB floppy and a 240 mS delay this gives "HUT_value = 24 * 
500000 / 8000000" or 15. However, it seems likely that the smartest
thing to do is just to set the value to 0 (which is the maximum in any 
mode).
</p>
<h4> <span class="mw-headline" id="Sense_Interrupt"> Sense Interrupt </span></h4>
<p>This command's main function is to return any error code from a Seek 
or Recalibrate command to your driver. It also clears an internal
bitflag in the controller. It is required in three circumstances that 
produce interrupts.
</p>
<ol><li> After doing a Controller Reset procedure with <a href="#Configure">drive polling mode</a> turned on.
</li><li> After the completion of a Seek command (or Relative Seek).
</li><li> After the completion of a Recalibrate command.
</li></ol>
<p>These are the only times when you should send a Sense Interrupt. You 
should still send them even if you have IRQs turned off in
the DOR and you are using PIO polling instead. If you send Sense 
Interrupt commands at other times: the command will complete, return
a 0x80, and then lock up the controller until you do a Reset.
</p>
<ul><li> Sense Interrupt command = 0x8
</li><li> No parameter bytes.
</li><li> No interrupt.
</li><li> First result byte = <a href="#st0">st0</a>
</li><li> Second result byte = controller's idea of the current cylinder
</li></ul>
<p>Note: if you try to read the result bytes without waiting for RQM to 
set, then you are likely to always get an incorrect result value
of 0. This is also likely to get your driver out of sync with the FDC 
for input/output. The correct value of st0 after a reset should
be 0xC0 | drive number (drive number = 0 to 3). After a Recalibrate/Seek
 it should be 0x20 | drive number.
</p>
<h4> <span class="mw-headline" id="Recalibrate"> Recalibrate </span></h4>
<p>Note: There is an error in the FDC datasheet regarding this command. 
Some statements say the command will try a maximum of 80 head
assembly steps. In other places it says 79 steps. The value 79 is 
correct.
</p><p>The motor needs to be on, and the drive needs to be selected. For
 this particular command, you do not have to wait for the command to
complete before selecting a different drive, and sending another 
Recalibrate command to it (but the Step Rates have to match, for this
to work).
</p><p>It is possible for a normal 1.44M floppy to be formatted with 83 
cylinders. So, theoretically, it may take two (or more) Recalibrates
to move the head back to cylinder 0. It is a good idea to test bit 5 
(value = 0x20) in <a href="#st0">st0</a> after the Sense Interrupt, and
retry the Recalibrate command if that bit is clear.
</p>
<ul><li> Recalibrate command = 0x7
</li><li> First parameter byte = drive number = 0 to 3.
</li><li> No result bytes.
</li><li> The interrupt may take up to 3 seconds to arrive, so use a long timeout.
</li></ul>
<p>It is possible to poll the "disk active" bits in the MSR to find out when the head movement is finished.
A Sense Interrupt command is required after this command completes, to clear it from being BUSY. (Multiple Sense Interrupts,
if you ran multiple simultaneous Recalibrates.)
</p>
<h4> <span class="mw-headline" id="Seek"> Seek </span></h4>
<p>The motor needs to be on, and the drive needs to be selected.
For this particular command, you do not have to wait for the command to 
complete before selecting a different drive, and sending another
Seek command to it. Maximum cylinder number is 255; if the disk has 
more, you must use the Relative Seek command, instead. There is
really no reason to ever use head 1 when seeking.
</p>
<ul><li> Seek command = 0xf
</li><li> First parameter byte = (head number &lt;&lt; 2) | drive number (the drive number must match the currently selected drive!)
</li><li> Second parameter byte = requested cylinder number
</li><li> No result bytes.
</li><li> The interrupt may take up to 3 seconds to arrive, so use a long timeout.
</li></ul>
<p>It is possible to poll the "disk active" bits in the MSR to find out when the head movement is finished.
</p><p>A Sense Interrupt command is required after this command completes, to clear it from being BUSY. (Multiple Sense Interrupts,
if you ran multiple Seeks.)
</p><p>Note: the controller tries to remember what cylinder each drive's heads are currently on. If you try to seek to that same
cylinder, then the controller will silently ignore the command (and return a "success" value). One of the things this means
is that you can get a "success" return value on a seek <b>even if there is no media in the drive</b>, if you happen to seek
to the wrong cylinder number.
</p>
<h5> <span class="mw-headline" id="Relative_seek"> Relative seek </span></h5>
<p>The normal Seek command allows you to select an absolute cylinder number from 0 to 255. It is also possible to use a "relative"
seek command in all situations, and especially for drives that have more than 255 cylinders (there are none, currently).
</p><p>To use a relative seek, set the MT bit to 1. To seek to higher cylinder numbers set the MFM bit -- clear MFM to seek
backwards to lower cylinder numbers. If you seek past cylinder 255, there are a lot of extra complications.
Otherwise, the command behaves identically to regular Seek.
</p>
<h4> <span class="mw-headline" id="Read.2FWrite"> Read/Write </span></h4>
<p>Note: Remember that this is in CHS format, so the sector number starts at 1.
</p>
<ul><li> Read command = MT bit | MFM bit | 0x6
</li><li> or Write command = MT bit | MFM bit | 0x5
</li><li> First parameter byte = (head number &lt;&lt; 2) | drive number (the drive number must match the currently selected drive!)
</li><li> Second parameter byte = cylinder number
</li><li> Third parameter byte = head number (yes, this is a repeat of the above value)
</li><li> Fourth parameter byte = starting sector number
</li><li> Fifth parameter byte = 2 (all floppy drives use 512bytes per sector)
</li><li> Sixth parameter byte = EOT (end of track, the last sector number on the track)
</li><li> Seventh parameter byte = 0x1b (GAP1 default size)
</li><li> Eighth parameter byte = 0xff (all floppy drives use 512bytes per sector)
</li></ul>
<ul><li> First result byte = <a href="#st0">st0</a> status register
</li><li> Second result byte = <a href="#st1">st1</a> status register
</li><li> Third result byte = <a href="#st2">st2</a> status register
</li><li> Fourth result byte = cylinder number
</li><li> Fifth result byte = ending head number
</li><li> Sixth result byte = ending sector number
</li><li> Seventh result byte = 2
</li></ul>
<p>Note: if you try to read the result bytes without waiting for RQM to set, then you are likely to always get an incorrect result
value of 0. This is also likely to get your driver out of sync with the FDC for input/output.
</p><p>Note2: You'll see that there's no sector count parameter. 
Instead, the FDC figures out when to stop by the DMA signaling to the 
FDC
that it's done, or in PIO mode, by the FDC experiencing a FIFO overrun 
or underrun.
</p><p>Note3: Floppy media and electronics are well known for being unreliable. Any read or write command that fails should be retried
at least twice, unless it was a write and failed on "write protect".
</p>
<h3> <span class="mw-headline" id="Perpendicular_Mode_and_2.88M_floppies"> Perpendicular Mode and 2.88M floppies </span></h3>
<p>If you are using an emulator and you need a floppy disk image that is
 bigger than 1440Kb, there is a 2880Kb image available.
In order to access it in Pmode, you need to modify your driver to handle
 Perpendicular Mode. Basically, it is an extra configuration
command where you enable any of the four drives for perpendicular mode.
</p><p>Note: If the parameter byte is 0 (except for the "perpendicular enable" bits), then a reset will not affect the settings.
</p>
<ul><li> Perpendicular Mode command = 0x12
</li><li> First parameter byte = (Drive 3 enable &lt;&lt; 5) | (Drive 2 
enable &lt;&lt; 4) | (Drive 1 enable &lt;&lt; 3) | (Drive 0 enable 
&lt;&lt; 2)
</li><li> No result bytes.
</li><li> No interrupt.
</li></ul>
<p>You also need to set CCR/DSR for the 1M datarate (value = 3) to access a 2.88M drive.
</p>
<h3> <span class="mw-headline" id="Additional_Programming_Notes"> Additional Programming Notes </span></h3>
<p>If you are doing a transfer between 2 floppy drives (so that both 
motors are on), and you are toggling "selection" between the two,
there may be a short delay required.
</p>
<h2> <span class="mw-headline" id="Code_Examples"> Code Examples </span></h2>
<h3> <span class="mw-headline" id="A_common_coding_error_example"> A common coding error example </span></h3>
<p>The following code intentionally contains a common bug that causes an infinite loop (waiting for IRQ6) on most emulators.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">volatile</span> byte ReceivedIRQ <span class="sy0">=</span> <span class="kw2">false</span><span class="sy0">;</span>
 
<span class="co1">// This function gets called when an IRQ6 is generated.</span>
<span class="kw4">void</span> FloppyHandler<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
   ReceivedIRQ <span class="sy0">=</span> <span class="kw2">true</span><span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="co1">// Waits for an IRQ to be issued.</span>
<span class="kw4">void</span> WaitForIRQ<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
   ReceivedIRQ <span class="sy0">=</span> <span class="kw2">false</span><span class="sy0">;</span>
   <span class="kw1">while</span><span class="br0">(</span><span class="sy0">!</span>ReceivedIRQ<span class="br0">)</span> <span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="co1">// buggy example Controller Reset function</span>
<span class="kw4">void</span> ResetFloppy<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    DisableController<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
    EnableController<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 
    WaitForIRQ<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span></pre></div></div>
<p>Sure this code <i>looks</i> OK, but some emulators or floppy drives might manage to be faster than your code. What if you've just returned from
<i>EnableController()</i> and the floppy already issued the IRQ6? Then <i>ReceivedIRQ</i> will be set to true, your driver will enter <i>WaitForIRQ()</i>,
set it to false again and then infinitely loop, waiting for an IRQ that 
has already been received. It's usually better to do something like:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">volatile</span> byte ReceivedIRQ <span class="sy0">=</span> <span class="kw2">false</span><span class="sy0">;</span>
 
<span class="co1">// This function gets called when an IRQ6 is generated.</span>
<span class="kw4">void</span> FloppyHandler<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
   ReceivedIRQ <span class="sy0">=</span> <span class="kw2">true</span><span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="co1">// pretty good Controller Reset function (it should do more checking of MSR)</span>
<span class="kw4">void</span> ResetFloppy<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    ReceivedIRQ <span class="sy0">=</span> <span class="kw2">false</span><span class="sy0">;</span> 	<span class="co1">// This will prevent the FDC from being faster than us!</span>
 
    <span class="co1">// Enter, then exit reset mode.</span>
    outb<span class="br0">(</span>Controller.<span class="me1">DOR</span><span class="sy0">,</span><span class="nu12">0x00</span><span class="br0">)</span><span class="sy0">;</span>
    outb<span class="br0">(</span>Controller.<span class="me1">DOR</span><span class="sy0">,</span><span class="nu12">0x0C</span><span class="br0">)</span><span class="sy0">;</span>
 
    <span class="kw1">while</span><span class="br0">(</span><span class="sy0">!</span>ReceivedIRQ<span class="br0">)</span> <span class="sy0">;</span>	<span class="co1">// Wait for the IRQ handler to run</span>
 
    <span class="co1">// sense interrupt -- 4 of them typically required after a reset</span>
    <span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">4</span> <span class="sy0">;</span> i <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="sy0">;</span> <span class="sy0">--</span>i<span class="br0">)</span><span class="sy0">;</span>
    <span class="br0">{</span>
       send_command<span class="br0">(</span>SENSE_INTERRUPT<span class="br0">)</span><span class="sy0">;</span>
       read_data_byte<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
       read_data_byte<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="br0">}</span>
 
    outb<span class="br0">(</span>controller.<span class="me1">CCR</span><span class="sy0">,</span><span class="nu12">0x00</span><span class="br0">)</span><span class="sy0">;</span>	<span class="co1">// 500Kbps -- for 1.44M floppy</span>
 
    <span class="co1">// configure the drive</span>
    send_command<span class="br0">(</span>SPECIFY<span class="br0">)</span><span class="sy0">;</span>
    outb<span class="br0">(</span>Controller.<span class="me1">FIFO</span><span class="sy0">,</span> steprate_headunload<span class="br0">)</span><span class="sy0">;</span>
    outb<span class="br0">(</span>Controller.<span class="me1">FIFO</span><span class="sy0">,</span> headload_ndma<span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span></pre></div></div>
<h2> <span class="mw-headline" id="Related_Links"> Related Links </span></h2>
<h3> <span class="mw-headline" id="Articles"> Articles </span></h3>
<ul><li> <a href="/DMA" title="DMA" class="mw-redirect">DMA</a>
</li></ul>
<h3> <span class="mw-headline" id="Reference_Documents"> Reference Documents </span></h3>
<ul><li> <a rel="nofollow" class="external free" href="http://www.osdever.net/documents/82077AA_FloppyControllerDatasheet.pdf?the_id=41">http://www.osdever.net/documents/82077AA_FloppyControllerDatasheet.pdf?the_id=41</a>
</li><li> <a rel="nofollow" class="external free" href="http://bos.asmhackers.net/docs/floppy/">http://bos.asmhackers.net/docs/floppy/</a>
</li><li> <a rel="nofollow" class="external free" href="http://bos.asmhackers.net/docs/floppy/docs/floppy_tutorial.txt">http://bos.asmhackers.net/docs/floppy/docs/floppy_tutorial.txt</a>
</li><li> <a rel="nofollow" class="external text" href="http://www.intel.com/design/archives/periphrl/docs/29046803.htm">Intel 82078 CHMOS SINGLE-CHIP FLOPPY DISK CONTROLLER datasheet (useless)</a>
</li><li> <a rel="nofollow" class="external free" href="http://www.brokenthorn.com/Resources/OSDev20.html">http://www.brokenthorn.com/Resources/OSDev20.html</a>
</li></ul>
<h3> <span class="mw-headline" id="Forum_Posts"> Forum Posts </span></h3>
<ul><li> <a href="http://forum.osdev.org/viewtopic.php?t=13538" class="extiw" title="topic:13538">TUTORIAL, with DMA, by Mystran (highly recommended, but has a few tiny errors)</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=310" class="extiw" title="topic:310">Floppy in pmode</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=12279" class="extiw" title="topic:12279">Floppy Disk Driver</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=8405" class="extiw" title="topic:8405">Floppy programming tutorial (floppy_tutorial.txt) companion thread</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=11181" class="extiw" title="topic:11181">Multitask Floppy Driver</a>
</li><li> <a href="http://forum.osdev.org/viewtopic.php?t=17274" class="extiw" title="topic:17274">PIO mode information</a>
</li></ul>
<h3> <span class="mw-headline" id="Implementations"> Implementations </span></h3>
<ul><li> <a rel="nofollow" class="external text" href="http://koders.com/c/fid051291340B94EC7F5D1A38EF6843466C0B07627B.aspx?s=fdc">freedos</a> (C, GPL)
</li><li> <a rel="nofollow" class="external text" href="http://bos.asmhackers.net/docs/floppy/snippet_9/fdc.c">GazOS</a> (C, GPL)
</li><li> <a rel="nofollow" class="external text" href="http://bos.asmhackers.net/docs/floppy/snippet_5/FLOPPY.ASM">RDOS</a> (Assembly, GPL)
</li><li> <a rel="nofollow" class="external text" href="http://www.gelato.unsw.edu.au/lxr/source/drivers/block/floppy.c">Linux</a> (C, GPL)
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 405/1000000
Post-expand include size: 324/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1458-0!*!0!!en!*!* and timestamp 20190510183045 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="https://wiki.osdev.org/index.php?title=Floppy_Disk_Controller&amp;oldid=22505">https://wiki.osdev.org/index.php?title=Floppy_Disk_Controller&amp;oldid=22505</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id="catlinks" class="catlinks"><div id="mw-normal-catlinks"><a href="/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="/Category:Storage" title="Category:Storage">Storage</a></li><li><a href="/Category:Common_Devices" title="Category:Common Devices">Common Devices</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=Floppy_Disk_Controller" title="You are encouraged to log in; however, it is not mandatory [alt-shift-o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li id="ca-nstab-main" class="selected"><span><a href="/Floppy_Disk_Controller" title="View the content page [alt-shift-c]" accesskey="c">Page</a></span></li>
					<li id="ca-talk"><span><a href="/Talk:Floppy_Disk_Controller" title="Discussion about the content page [alt-shift-t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="/Floppy_Disk_Controller">Read</a></span></li>
					<li id="ca-viewsource"><span><a href="/index.php?title=Floppy_Disk_Controller&amp;action=edit" title="This page is protected.
You can view its source [alt-shift-e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="/index.php?title=Floppy_Disk_Controller&amp;action=history" title="Past revisions of this page [alt-shift-h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="/index.php" id="searchform">
		<input name="title" value="Special:Search" type="hidden">
				<input name="search" title="Search OSDev Wiki [alt-shift-f]" accesskey="f" id="searchInput" type="search">		<input name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" type="submit">		<input name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" type="submit">			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="/Main_Page" title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id="p-navigation">
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [alt-shift-z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [alt-shift-x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id="p-about">
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [alt-shift-r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id="p-tb">
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Floppy_Disk_Controller" title="A list of all wiki pages that link here [alt-shift-j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/Floppy_Disk_Controller" title="Recent changes in pages linked from this page [alt-shift-k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [alt-shift-q]" accesskey="q">Special pages</a></li>
			<li><a href="/index.php?title=Floppy_Disk_Controller&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="/index.php?title=Floppy_Disk_Controller&amp;oldid=22505" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->
<div class="portal" id="p-lang">
	<h5>In other languages</h5>
	<div class="body">
		<ul>
			<li class="interwiki-de"><a href="http://www.lowlevel.eu/wiki/Floppy_Disk_Controller" title="Floppy Disk Controller">Deutsch</a></li>
		</ul>
	</div>
</div>

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 7 July 2018, at 04:22.</li>
											<li id="footer-info-viewcount">This page has been accessed 148,650 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="/OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="/OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="/OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" height="31" width="88"></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script><script type="text/javascript" src="/load.php?debug=false&amp;lang=en&amp;modules=jquery.checkboxShiftClick%2Ccookie%2CmakeCollapsible%2CmessageBox%2CmwPrototypes%2Cplaceholder%7Cmediawiki.language%2Cuser%2Cutil%7Cmediawiki.legacy.ajax%2Cwikibits%7Cmediawiki.page.ready&amp;skin=vector&amp;version=20160209T143612Z&amp;*"></script>
<script src="/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.035 secs. -->
	

</body></html>